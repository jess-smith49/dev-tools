{"version":3,"sources":["utils/auth.js","components/Header/index.js","components/Footer/index.js","utils/mutations.js","pages/SignupForm/index.js","pages/Landing/index.js","pages/LoginForm/index.js","App.js","serviceWorker.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Header","className","Auth","loggedIn","href","onClick","logout","to","Footer","LOGIN_USER","gql","ADD_USER","SignUp","useState","username","email","password","formState","setFormState","useMutation","addUser","error","handleChange","e","target","name","value","handleFormSubmit","event","a","preventDefault","variables","data","console","log","login","onSubmit","placeholder","type","id","onChange","LandingPage","Login","props","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","Signup","Landing","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41a36006.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    getProfile() {\n        return decode(this.getToken());\n      }\n    \n    loggedIn(){\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    isTokenExpired(token){\n        try{\n            const decoded = decode(token);\n            if(decoded.exp < Date.now()/1000){\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        catch(err) {\n            return false;\n        }\n    }\n\n    getToken(){\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken){\n        localStorage.setItem('id_token', idToken);\n        window.location.assign('/');\n    }\n\n    logout() {\n        localStorage.removeItem('id_token');\n        window.location.assign('/');\n    }\n}\n\nexport default new AuthService();","import React from 'react';\nimport Auth from '../../utils/auth';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n    function showNavigation() {\n        if (Auth.loggedIn()) {\n            return (\n                <ul>\n                    <li>\n                        <a href='/' onClick={() => Auth.logout()}>\n                            Logout\n                        </a>\n                    </li>\n                </ul>\n            ) \n        } else {\n            return (\n                <ul>\n                    <li>\n                        <Link to=\"/signup\">\n                            Signup\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/login\">\n                            Login\n                        </Link>\n                    </li>\n                </ul>\n            )\n        }\n    }\n    return(\n        <header className=\"header-container\">\n            <div className=\"flex-wrap\">\n                <h1>Dev Tools</h1>\n            </div>\n            <nav>\n                {showNavigation()}\n            </nav>\n        </header>\n    )\n};","import React from 'react';\n\nexport default function Footer() {\n    return(\n        <footer className=\"footer-container\">\n            <div className=\"footer-text\">\n                A JMJM Build \n            </div>\n        </footer>\n    )\n};","import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql `\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`\n\nexport const ADD_USER = gql `\n    mutation addUser($username: String!, $email: String!, $password: String!){\n        addUser(username: $username, email: $email, password: $password){\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`\n\nexport const ADD_SET = gql `\n    mutation addSet($setName: String!){\n        addSet(setName: $setName) {\n            set {\n                _id\n                setName\n                    card {\n                    _id\n                    question\n                    answer\n                }\n            \n            }\n        }\n    }\n`\n\nexport const ADD_CARD = gql `\n    mutation addCard($question: String!, $answer: String!){\n        addCard(question: $question, answer: $answer){\n            set {\n                _id\n                setName\n                card {\n                    _id\n                    question\n                    answer\n                }\n            }\n        }\n    }\n    `\n\nexport const REMOVE_SET = gql `\n    mutation removeSet($setName: String!){\n        removeSet(setName: $setName){\n            set {\n                _id\n                setName\n                card {\n                    _id\n                    question \n                    answer\n                }\n            }\n        }\n    }\n`\n\nexport const REMOVE_CARD = gql `\n    mutation removeCard($question: String!, $answer: String!){\n        removeCard(question: $question, answer: $answer){\n            set {\n                _id\n                setName \n                card {\n                    _id\n                    question\n                    answer\n                }\n            }\n        }\n    }\n`\n\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../../utils/auth';\nimport {ADD_USER} from '../../utils/mutations';\n\n\n\nconst SignUp = () => {\n\n    const [formState, setFormState] = useState({ username: '', email: '', password: '' })\n    //user mutation goes here\n    const [addUser, { error }] = useMutation(ADD_USER);\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n\n        setFormState({\n            ...formState,\n            [name]: value\n        })\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n    \n        try {\n          const { data } = await addUser({\n            variables: { ...formState }\n          });\n          console.log(data);\n          Auth.login(data.addUser.token);\n    \n        } catch (err) {\n          console.error(err);\n        }\n    \n        setFormState({\n          username: '',\n          email: '',\n          password: '',\n        });\n      };\n    \n\n\n    return (\n        <div>\n            <Link to=\"/login\">Login instead</Link>\n\n            <h2>Sign Up Below</h2>\n            <form onSubmit={handleFormSubmit}>\n                <div>\n                    <input\n                        className=\"form-input\"\n                        placeholder=\"Your username\"\n                        name=\"username\"\n                        type=\"username\"\n                        id=\"username\"\n                        onChange={handleChange}\n                    />\n                    <input\n                        className=\"form-input\"\n                        placeholder=\"Your email\"\n                        name=\"email\"\n                        type=\"email\"\n                        id=\"email\"\n                        onChange={handleChange}\n                    />\n                    <input\n                        className=\"form-input\"\n                        placeholder=\"******\"\n                        name=\"password\"\n                        type=\"password\"\n                        id=\"password\"\n                        onChange={handleChange}\n                    />\n\n                    <button type=\"submit\">Finish Signup</button>\n                </div>\n            </form>\n            {error && <div>Something Went Wrong</div>}\n        </div>\n    )\n\n    // return (\n    //     <section className=\"signup-container\">\n    //         <form>\n    //             <input name=\"email-input\" className=\"form-input\" placeholder=\"Enter your email here\"></input>\n\n    //             <input name=\"user-input\" className=\"form-input\" placeholder=\"Create a unique username\"></input> \n\n    //             <input name=\"pass-input\" className=\"form-input\" placeholder=\"Create a unique password\"></input> \n                \n    //             <button type=\"submit\">Get Learning!</button>\n\n    //         </form>\n    //     </section>  \n    //   )\n};\n\nexport default SignUp;","import React from 'react';\n\n\nexport default function LandingPage() {\n    return(\n        <section className=\"landing-container\">\n            <h3 className=\"landing-text\">You should join this app because you will learn things</h3>\n            <button type=\"submit\" className=\"login-btn\">Sign Me Up!</button>\n            <button type=\"submit\" className=\"signup-btn\">Log Me In!</button> \n        </section>\n    )\n};","import React, {useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport {useMutation} from '@apollo/react-hooks';\nimport Auth from '../../utils/auth';\nimport { LOGIN_USER } from '../../utils/mutations';\n\n\nconst Login = props => {\n    const [formState, setFormState] = useState({email: '', password: ''});\n    const [Login, {error}] = useMutation(LOGIN_USER);\n\n    const handleChange = e => {\n        const {name, value } = e.target;\n\n        //seting form state to value specified in form\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n    };\n\n    const handleFormSubmit = async e => {\n        e.preventDefault();\n\n        try{\n            const{data} = await Login({\n                variables: {...formState}\n            });\n\n            Auth.login(data.login.token);\n        }\n        catch(e){\n            console.log(e)\n        }\n\n        setFormState({\n            email: '',\n            password: ''\n        })\n    }\n\n\n    return(\n    <div>\n        <Link to=\"/signup\">Sign-up instead</Link>\n        \n        <h2>Login Below</h2>\n        <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n            {error && <div>Something Went Wrong</div>}\n        </div>\n    )\n};\n\nexport default Login;","import './App.css';\nimport React from 'react';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from 'apollo-boost';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n//component imports\nimport Header from './components/Header';\nimport Footer from './components/Footer'\n//page imports\nimport Signup from './pages/SignupForm';\nimport Landing from './pages/Landing';\nimport Login from './pages/LoginForm';\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n\n  uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path='/signup' component={Signup} />\n          <Route exact path='/login' component={Login} />\n          <Route exact path='/' component={Landing} />         \n        </Switch>\n      </Router>\n      <Footer />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n"],"sourceRoot":""}