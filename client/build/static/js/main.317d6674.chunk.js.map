{"version":3,"sources":["utils/auth.js","components/Header/index.js","assets/images/5.png","pages/Landing/index.js","components/Footer/index.js","utils/mutations.js","pages/SignupForm/index.js","pages/LoginForm/index.js","utils/queries.js","components/Set/index.js","pages/Dashboard/index.js","components/FlashCard/index.js","pages/SetWrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","setName","_id","Header","Container","fluid","Navbar","expand","Nav","className","Auth","loggedIn","href","onClick","logout","to","CTA","Row","Col","src","Photo","Footer","LOGIN_USER","gql","ADD_USER","ADD_SET","ADD_CARD","SignUp","useState","username","email","password","formState","setFormState","useMutation","addUser","error","handleChange","e","console","log","target","name","value","handleFormSubmit","event","a","preventDefault","variables","data","login","onSubmit","placeholder","type","id","onChange","Login","props","QUERY_ME","QUERY_SEED_SET","Set","useQuery","loading","userData","me","setLoading","setSeeds","seededSets","map","seeds","Card","sets","set","Dashboard","show","setShow","handleClose","userSets","setText","addSet","CardDeck","md","Body","Button","variant","Modal","onHide","closeButton","Title","Form","Flashcard","setId","useParams","userCards","cardObj","cards","card","question","answer","icon","faAngleDoubleRight","CardSet","addCard","CardGroup","FlashCard","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.317d6674.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    getProfile() {\n        return decode(this.getToken());\n      }\n    \n    loggedIn(){\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    isTokenExpired(token){\n        try{\n            const decoded = decode(token);\n            if(decoded.exp < Date.now()/1000){\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        catch(err) {\n            return false;\n        }\n    }\n\n    getToken(){\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken){\n        localStorage.setItem('id_token', idToken);\n        window.location.assign('/dashboard');\n    }\n\n    logout() {\n        localStorage.removeItem('id_token');\n        window.location.assign('/');\n    }\n \n    addSet(setName) {\n        localStorage.setItem('setName', setName)\n        window.location.assign(`/flashcard/${setName._id}`)\n    }\n}\n\nexport default new AuthService();","import React from 'react';\nimport Auth from '../../utils/auth';\nimport { Link } from 'react-router-dom';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\n\nexport default function Header() {\n    function showNavigation() {\n        if (Auth.loggedIn()) {\n            return (\n                <ul>\n                    <li>\n                        <a href='/' onClick={() => Auth.logout()}>\n                            Logout\n                        </a>\n                    </li>\n                </ul>\n            ) \n        } else {\n            return (\n                <ul>\n                    <li>\n                        <Link to=\"/signup\">\n                            Signup\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/login\">\n                            Login\n                        </Link>\n                    </li>\n                </ul>\n            )\n        }\n    }\n    return(\n        <header>\n        <Container fluid>\n           <Navbar expand=\"lg\">\n               <h1>Dev Learn</h1>\n               <Nav>\n                   <div className=\"nav-wrapper\">\n                   {showNavigation()}\n                   </div>\n               </Nav>\n           </Navbar>\n           </Container>\n        </header>\n    )\n};\n\n{/* <div className=\"flex-wrap\">\n<h1 className=\"h-lg\">Dev Learn</h1>\n<nav>\n{showNavigation()}\n</nav>\n</div> */}","export default __webpack_public_path__ + \"static/media/5.c4b87626.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Testimonials from '../../components/Testimonials';\nimport Header from '../../components/Header';\nimport Photo from '../../assets/images/5.png'\nimport { Col, Row, Container } from 'react-bootstrap'\n\n\nexport default function CTA() {\n    return (\n        <section className=\"landing-container\">\n            <Header />\n            <Container fluid className=\"cta\">\n                <Row className=\"cta-wrapper\">\n                    <Col>\n                        <div className=\"cta-text-wrapper\">\n                            <div className=\"cta-text\">\n                                <p>\n                                    The up and coming flashcard app for aspiring web developers.\n                    </p>\n                            </div>\n                            <div className=\"cta-buttons\">\n                                <div className=\"cta-btn\">\n                                    <Link to=\"/signup\">Create an Account </Link>\n                                </div>\n                                <div className=\"cta-btn\">\n                                    <Link to=\"/login\">Login </Link>\n                                </div>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <div className=\"img\">\n                            <img src={Photo}></img>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        </section>\n\n    )\n};","import React from 'react';\n\nexport default function Footer() {\n    return(\n        <footer className=\"footer-container\">\n            <div className=\"footer-text\">\n                A JMJM Build \n            </div>\n        </footer>\n    )\n};","import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql `\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`\n\nexport const ADD_USER = gql `\n    mutation addUser($username: String!, $email: String!, $password: String!){\n        addUser(username: $username, email: $email, password: $password){\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`\n\nexport const ADD_SET = gql `\n    mutation addSet($setName: String!){\n        addSet(setName: $setName) {\n            \n                _id\n                setName\n                    cards {\n                    _id\n                    question\n                    answer\n                }\n            \n           \n        }\n    }\n`\n\nexport const ADD_CARD = gql `\n    mutation addCard($setId: ID!, $question: String!, $answer: String!){\n        addCard(setId: $setId, question: $question, answer: $answer){\n           \n                _id\n                setName\n                cards {\n                    _id\n                    question\n                    answer\n                }\n            \n        }\n    }\n    `\n\nexport const REMOVE_SET = gql `\n    mutation removeSet($setId: ID!){\n        removeSet(setId: $setId){\n            set {\n                _id\n                setName\n                card {\n                    _id\n                    question \n                    answer\n                }\n            }\n        }\n    }\n`\n\nexport const REMOVE_CARD = gql `\n    mutation removeCard($setId: ID!, $cardId: ID!){\n        removeCard(setId: $setId, cardId: $cardId){\n            set {\n                _id\n                setName \n                card {\n                    _id\n                    question\n                    answer\n                }\n            }\n        }\n    }\n`\n\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../../utils/auth';\nimport { ADD_USER } from '../../utils/mutations';\nimport Header from '../../components/Header'\n\n\n\nconst SignUp = () => {\n\n    const [formState, setFormState] = useState({ username: '', email: '', password: '' })\n    //user mutation goes here\n    const [addUser, { error }] = useMutation(ADD_USER);\n\n    const handleChange = e => {\n        console.log(e.target)\n        const { name, value } = e.target;\n\n        setFormState({\n            ...formState,\n            [name]: value\n        })\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            console.log(formState);\n            const { data } = await addUser({\n                variables: { ...formState }\n            });\n            console.log(data);\n            Auth.login(data.addUser.token);\n\n        } catch (err) {\n            console.error(err);\n        }\n\n        setFormState({\n            username: '',\n            email: '',\n            password: '',\n        });\n    };\n\n\n\n    return (\n        <section>\n            <Header />\n            <div className=\"form\">\n                <div className=\"form-container\">\n                    <h2>Sign Up Below</h2>\n                    <form onSubmit={handleFormSubmit}>\n                        <div>\n                            <input\n                                className=\"form-input\"\n                                placeholder=\"Your username\"\n                                name=\"username\"\n                                type=\"username\"\n                                id=\"username\"\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <input\n                                className=\"form-input\"\n                                placeholder=\"Your email\"\n                                name=\"email\"\n                                type=\"email\"\n                                id=\"email\"\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <input\n                                className=\"form-input\"\n                                placeholder=\"******\"\n                                name=\"password\"\n                                type=\"password\"\n                                id=\"password\"\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <button type=\"submit\">Finish Signup</button>\n                        </div>\n                    </form>\n                    {error && <div>Something Went Wrong</div>}\n                </div>\n                </div>\n        </section >\n    )\n\n    // return (\n    //     <section className=\"signup-container\">\n                //         <form>\n                    //             <input name=\"email-input\" className=\"form-input\" placeholder=\"Enter your email here\"></input>\n\n    //             <input name=\"user-input\" className=\"form-input\" placeholder=\"Create a unique username\"></input>\n\n    //             <input name=\"pass-input\" className=\"form-input\" placeholder=\"Create a unique password\"></input>\n\n    //             <button type=\"submit\">Get Learning!</button>\n\n    //         </form>\n    //     </section>  \n    //   )\n};\n\nexport default SignUp;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../../utils/auth';\nimport { LOGIN_USER } from '../../utils/mutations';\nimport Header from '../../components/Header';\n\n\nconst Login = props => {\n    const [formState, setFormState] = useState({ email: '', password: '' });\n    const [Login, { error }] = useMutation(LOGIN_USER);\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n\n        //seting form state to value specified in form\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n    };\n\n    const handleFormSubmit = async e => {\n        e.preventDefault();\n\n        try {\n            console.log(formState);\n            const { data } = await Login({\n                variables: { ...formState }\n            });\n            console.log(data.login.token);\n\n            Auth.login(data.login.token);\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n        setFormState({\n            email: '',\n            password: ''\n        })\n    }\n\n\n    return (\n        <section>\n            <Header />\n            <div className=\"form\">\n                <div className=\"form-container\">\n                    <Link to=\"/signup\">Sign-up instead</Link>\n\n                    <h2>Login Below</h2>\n                    <form onSubmit={handleFormSubmit}>\n                        <input\n                            className=\"form-input\"\n                            placeholder=\"Your email\"\n                            name=\"email\"\n                            type=\"email\"\n                            id=\"email\"\n                            value={formState.email}\n                            onChange={handleChange}\n                        />\n                        <br />\n                        <input\n                            className=\"form-input\"\n                            placeholder=\"******\"\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"password\"\n                            value={formState.password}\n                            onChange={handleChange}\n                        />\n                        <br />\n                        <button type=\"submit\">\n                            Submit\n              </button>\n                    </form>\n                    {error && <div>Something Went Wrong</div>}\n                </div>\n            </div>\n        </section>\n    )\n};\n\nexport default Login;","import gql from 'graphql-tag'\n\nexport const QUERY_ME = gql`\n{\n    me {\n        _id\n        username\n        email\n        sets {\n            _id\n            setName\n            cards {\n                _id\n                question\n                answer\n            }\n        }\n    }\n}\n`\n\nexport const QUERY_SET = gql`\n    query getOneSet($_id: ID!) {\n        set(_id: $_id) {\n            _id\n            setName\n            cards {\n                _id\n                question\n                answer\n            }\n        }\n    }\n`;\n\nexport const QUERY_SEED_SET = gql`\n    query getSeededSets {\n        seededSets {\n            _id\n            setName\n            cards {\n                _id\n                question\n                answer\n            }\n        }\n    }\n`;\n","import React from 'react';\nimport { QUERY_ME, QUERY_SEED_SET } from '../../utils/queries';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, Title } from 'react-bootstrap';\n\nfunction Set() {\n    // functionality to create a card and add cards to set\n    // query user data\n    const { loading , data } = useQuery(QUERY_ME);\n    const userData = data?.me || {};\n\n    // query seeded sets\n    const {loading:setLoading, data: setSeeds } = useQuery(QUERY_SEED_SET);\n    console.log(setSeeds);\n\n    if (loading || setLoading) {\n        return <div>Loading...</div>;\n      }\n\n    // add a click handle to bring to cards\n    return (\n        <section>\n            <div className=\"seededSets\">\n                <h1> Test out these decks! </h1>\n                <div>\n                        {setSeeds.seededSets.map(seeds => {\n                            <Card key={seeds._id}>\n                                <h1>{seeds.setName}</h1>\n                            </Card>\n                         })}\n                    \n                </div>\n            </div>\n\n            {userData.sets? (userData.sets?.map(set => {\n                    <Card key={set._id}>\n                        <h1>{set.setName}</h1>\n                    </Card>\n                \n            })) : (\n                <p> You have not created a set yet</p>\n            )}\n\n        </section>\n    )\n}\n\nexport default Set;\n","import React, { useState } from 'react'\nimport {Link, Router} from 'react-router-dom';\nimport Header from '../../components/Header';\nimport { Card, Button, Modal, CardDeck, Form } from 'react-bootstrap';\nimport CreateSet from '../../components/AddSet';\nimport {ADD_SET} from '../../utils/mutations';\nimport {QUERY_ME} from '../../utils/queries';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport Set from '../../components/Set';\n\n\n\nexport default function Dashboard() {\n    const [show, setShow] = useState(false);\n\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    // render seeded cards\n\n        let userSets = [];\n    //query stuff\n        const {data} = useQuery(QUERY_ME);\n        console.log(data);\n        if(data){\n            userSets = data.me.sets;\n        };\n        console.log(userSets);\n\n       //mutation stuff\n       const [setName, setText] = useState('');\n       const [addSet, {error}] = useMutation(ADD_SET);\n   \n       const handleChange = e => {\n           const {name, value} = e.target;\n           console.log(setName);\n           setText(e.target.value)\n       \n   };\n       const handleFormSubmit = async event => {\n           event.preventDefault();\n           console.log(setName)\n           \n           try{\n                await addSet({\n                   variables: {setName}\n               });\n               console.log(setName)\n               \n               setText('')\n           }\n           catch(e) {\n               console.log(error)\n           }\n           //function to close\n           handleClose();\n   \n       }\n\n    return (\n        <div>\n            <Header />\n        <section className=\"dash\">\n            <CardDeck className=\"dash-wrap\">\n            <Set />\n            {userSets.map(set => {\n                return (\n                    <Card md={2} key={set._id}>\n                <Card.Body>\n                    {/* in the router add id after /flashcards/(idparamter) */}\n                    <Link to={`/flashcards/${set._id}`}>{set.setName}</Link>\n                    {/* <Link to='/flashcards'>{set.setName}</Link> */}\n                </Card.Body>\n            </Card>\n                )})}\n            \n            <Card className=\"create\">\n            <Card.Body>\n                <Button variant=\"primary\" onClick={handleShow}>\n                    Create your own set\n                </Button>\n                <Modal show={show} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                   <Modal.Title>Modal heading</Modal.Title>\n                 </Modal.Header>\n               <Modal.Body>\n                   <Form >\n                       <h1>Name:</h1>\n                       <textarea\n                        \n                        name=\"set\"\n                        value={setName}\n                        onChange={handleChange}\n                       >\n                       </textarea>\n                       <button type=\"submit\"></button>\n                   </Form>\n                   </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                          </Button>\n                        <Button type=\"submit\" variant=\"primary\" onClick={handleFormSubmit}>\n                            Save Changes\n                      </Button>\n                    </Modal.Footer>\n                </Modal>\n                </Card.Body>\n            </Card>\n           \n               \n            </CardDeck>\n        </section>\n        </div>\n    )\n};","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleDoubleRight } from '@fortawesome/free-solid-svg-icons'\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { QUERY_ME } from '../../utils/queries';\nimport { useParams } from 'react-router-dom';\nimport { QUERY_SET } from '../../utils/queries';\n\n\n//export default function FlashCard() {\nconst Flashcard = props => {\n\n    const {id: setId} = useParams();\n\n    // const {loading, data} = useQuery(QUERY_ME, {\n    //     variables: {id: setId}\n    // })\n\n    // const set = data?.set || {};\n\n    // if (loading) {\n    //     return <div>Loading...</div>;\n    //   }\n    //  // ///query stuff\n    let userCards = [];\n    const { data } = useQuery(QUERY_ME);\n    console.log(data);\n    if (data) {\n        userCards = data.me.sets;\n        console.log(data);\n    }\n    console.log(userCards);\n\n    //\n    //grab a set //map over cards to grab question and answer\n    return (\n\n        <div>\n\n            {userCards.map(cardObj => cardObj.cards.map(card => {\n\n\n            return (\n                            \n                        <Card key={setId}>\n                        <Card.Body>\n                        <div className=\"question\">\n                        {card.question}\n                        </div>\n                        <div>\n                        {card.answer}\n                        </div>\n                        <FontAwesomeIcon icon={faAngleDoubleRight} className=\"fa-3x\"/>\n                        </Card.Body> \n                        </Card>\n                        )\n\n            }))}\n        \n        \n    </div>\n    \n    \n    );\n}\n\nexport default Flashcard;","import { React, useState } from 'react';\nimport { CardGroup, Card, Modal, Button, CardDeck , Form} from 'react-bootstrap';\nimport FlashCard from '../../components/FlashCard';\nimport Header from '../../components/Header';\nimport {ADD_CARD} from '../../utils/mutations';\n//import {QUERY_ME} from '../../utils/queries';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useParams } from 'react-router-dom';\nimport { QUERY_SET } from '../../utils/queries';\n\n\n\nexport default  function CardSet (){\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n     const {id: setId} = useParams();\n\n    // const {loading, data} = useQuery(QUERY_SET, {\n    //     variables: {id: setId}\n    // })\n\n    // const set = data?.set || {};\n\n    // //query stuff\n    // let userCards = [];\n    // const {data} = useQuery(QUERY_ME);\n    // console.log(data);\n    // if(data){\n    //     userCards = data.me.cards;\n    // }\n    // console.log(userCards);\n\n    //mutations\n    const[formState, setFormState] = useState({id: setId, question: '', answer: ''});\n    const [addCard, {error}] = useMutation(ADD_CARD);\n\n    const handleChange = e => {\n        const {name, value} = e.target;\n\n        setFormState({\n            ...formState,\n            [name]: value\n        })\n        //console.log(cardName);\n       // cardText(e.target.value)\n    }\n\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n        \n        try{\n            await addCard({\n                variables: {...formState, setId}\n            });\n\n            setFormState('')\n        }\n        catch(e) {\n            console.log(error)\n        }\n\n        handleClose();\n    }\n\n\n    return (\n        <section className=\"set-wrap\">\n            <Header />\n            <div className=\"set-body\">\n                <h1>HTML</h1>\n                <div className=\"set-modal\"></div>\n                <Button variant=\"primary\" onClick={handleShow}>\n                    Add A Card To Your Set\n                </Button>\n                <Modal show={show} onHide={handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Modal heading</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form >\n                        <h3>Question:</h3>\n                        <textarea\n                            name= 'question'\n                            value={formState.question}\n                            onChange={handleChange}\n                        ></textarea>\n                        <h3>Answer:</h3>\n                        <textarea\n                            name='answer'\n                            value={formState.answer}\n                            onChange={handleChange}\n                        ></textarea>\n                    </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                          </Button>\n                        <Button variant=\"primary\" onClick={handleFormSubmit}>\n                            Save Changes\n                      </Button>\n                    </Modal.Footer>\n                </Modal>\n            <div className=\"card-wrap\">\n                <CardGroup>\n                    <FlashCard />\n                </CardGroup>\n            </div>\n            </div>\n        </section >\n    )\n}\n\n","import React from 'react';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from 'apollo-boost';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n//component imports\nimport Landing from './pages/Landing';\nimport Footer from './components/Footer';\n//page imports\nimport Signup from './pages/SignupForm';\nimport Login from './pages/LoginForm';\nimport Dashboard from './pages/Dashboard'\nimport SetWrapper from './pages/SetWrapper';\nimport 'react-multi-carousel/lib/styles.css';\nimport Set from \"./components/Set\"\nimport FlashCard from './components/FlashCard';\n\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n\n  uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n       <Router>\n        <div>\n        <Switch>\n          <Route path=\"/signup\">\n            <Signup />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route>\n          <Route path=\"/flashcards/:id\" >\n            <SetWrapper />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n        </div>\n      </Router>\n      <Footer />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if ('serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import 'semantic-ui-css/semantic.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n"],"sourceRoot":""}