{"version":3,"sources":["pages/Landing/index.js","components/Footer/index.js","utils/auth.js","utils/mutations.js","components/Header/index.js","pages/SignupForm/index.js","pages/LoginForm/index.js","App.js","serviceWorker.js","index.js"],"names":["CTA","className","to","Footer","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","ADD_USER","Header","Auth","loggedIn","href","onClick","logout","SignUp","useState","username","email","password","formState","setFormState","useMutation","addUser","error","handleChange","e","target","name","value","handleFormSubmit","event","a","preventDefault","console","log","variables","data","login","onSubmit","placeholder","type","id","onChange","Login","props","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4aaa0eaf.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function CTA() {\n    return (\n        <div className=\"apply-grad\">\n            <section className=\"cta\">\n                <div className=\"cta-title\">\n                    <h1 className=\"h-lg\">Dev Learn</h1>\n                </div>\n                <div className=\"cta-text\">\n                    <p>\n                        One of the biggest hurdles when learning web development is memorizing the vast amount of definitions\n                        and terms that is being thrown at you. The Dev Learn team wanted to create a simple,\n                        easy-to-use application that would tackle two of the major components of learning code:\n                         <span>\n                          <br /> 1. Consistency.\n                          <br /> 2. Memorization.\n                        </span>\n                    </p>\n                    <p>\n                        We came up with our favorite questions from our experience and created 3 sets of flashcards that\n                        you will automatically have access to when you create an account. You will also receive daily reminders\n                        so you never miss out on a day of studying.\n                        <br />\n                        <span>\n                        So what are you waiting for? Get learning!\n                        </span>\n                    </p>\n                </div>\n                <div className=\"cta-buttons\">\n                    <div className=\"cta-btn\">\n                        <Link to=\"/signup\">Create an Account </Link>\n                    </div>\n                    <div className=\"cta-btn\">\n                        <Link to=\"/login\">Login </Link>\n                    </div>\n                </div>\n\n            </section>\n        </div>\n    )\n};","import React from 'react';\n\nexport default function Footer() {\n    return(\n        <footer className=\"footer-container\">\n            <div className=\"footer-text\">\n                A JMJM Build \n            </div>\n        </footer>\n    )\n};","import decode from 'jwt-decode';\n\nclass AuthService {\n    getProfile() {\n        return decode(this.getToken());\n      }\n    \n    loggedIn(){\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    isTokenExpired(token){\n        try{\n            const decoded = decode(token);\n            if(decoded.exp < Date.now()/1000){\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        catch(err) {\n            return false;\n        }\n    }\n\n    getToken(){\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken){\n        localStorage.setItem('id_token', idToken);\n        window.location.assign('/');\n    }\n\n    logout() {\n        localStorage.removeItem('id_token');\n        window.location.assign('/');\n    }\n}\n\nexport default new AuthService();","import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql `\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`\n\nexport const ADD_USER = gql `\n    mutation addUser($username: String!, $email: String!, $password: String!){\n        addUser(username: $username, email: $email, password: $password){\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`\n\nexport const ADD_SET = gql `\n    mutation addSet($setName: String!){\n        addSet(setName: $setName) {\n            set {\n                _id\n                setName\n                    card {\n                    _id\n                    question\n                    answer\n                }\n            \n            }\n        }\n    }\n`\n\nexport const ADD_CARD = gql `\n    mutation addCard($question: String!, $answer: String!){\n        addCard(question: $question, answer: $answer){\n            set {\n                _id\n                setName\n                card {\n                    _id\n                    question\n                    answer\n                }\n            }\n        }\n    }\n    `\n\nexport const REMOVE_SET = gql `\n    mutation removeSet($setName: String!){\n        removeSet(setName: $setName){\n            set {\n                _id\n                setName\n                card {\n                    _id\n                    question \n                    answer\n                }\n            }\n        }\n    }\n`\n\nexport const REMOVE_CARD = gql `\n    mutation removeCard($question: String!, $answer: String!){\n        removeCard(question: $question, answer: $answer){\n            set {\n                _id\n                setName \n                card {\n                    _id\n                    question\n                    answer\n                }\n            }\n        }\n    }\n`\n\n","import React from 'react';\nimport Auth from '../../utils/auth';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n    function showNavigation() {\n        if (Auth.loggedIn()) {\n            return (\n                <ul>\n                    <li>\n                        <a href='/' onClick={() => Auth.logout()}>\n                            Logout\n                        </a>\n                    </li>\n                </ul>\n            ) \n        } else {\n            return (\n                <ul>\n                    <li>\n                        <Link to=\"/signup\">\n                            Signup\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/login\">\n                            Login\n                        </Link>\n                    </li>\n                </ul>\n            )\n        }\n    }\n    return(\n        <header>\n            <div className=\"flex-wrap\">\n                <h1 className=\"h-lg\">Dev Learn</h1>\n            <nav>\n                {showNavigation()}\n            </nav>\n            </div>\n        </header>\n    )\n};","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../../utils/auth';\nimport { ADD_USER } from '../../utils/mutations';\nimport Header from '../../components/Header'\n\n\n\nconst SignUp = () => {\n\n    const [formState, setFormState] = useState({ username: '', email: '', password: '' })\n    //user mutation goes here\n    const [addUser, { error }] = useMutation(ADD_USER);\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n\n        setFormState({\n            ...formState,\n            [name]: value\n        })\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            console.log(formState);\n            const { data } = await addUser({\n                variables: { ...formState }\n            });\n            console.log(data);\n            Auth.login(data.addUser.token);\n\n        } catch (err) {\n            console.error(err);\n        }\n\n        setFormState({\n            username: '',\n            email: '',\n            password: '',\n        });\n    };\n\n\n\n    return (\n        <section>\n            <Header />\n            <div className=\"form\">\n                <div className=\"form-container\">\n                    <h2>Sign Up Below</h2>\n                    <form onSubmit={handleFormSubmit}>\n                        <div>\n                            <input\n                                className=\"form-input\"\n                                placeholder=\"Your username\"\n                                name=\"username\"\n                                type=\"username\"\n                                id=\"username\"\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <input\n                                className=\"form-input\"\n                                placeholder=\"Your email\"\n                                name=\"email\"\n                                type=\"email\"\n                                id=\"email\"\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <input\n                                className=\"form-input\"\n                                placeholder=\"******\"\n                                name=\"password\"\n                                type=\"password\"\n                                id=\"password\"\n                                onChange={handleChange}\n                            />\n                            <br />\n                            <button type=\"submit\">Finish Signup</button>\n                        </div>\n                    </form>\n                    {error && <div>Something Went Wrong</div>}\n                </div>\n                </div>\n        </section >\n    )\n\n    // return (\n    //     <section className=\"signup-container\">\n                //         <form>\n                    //             <input name=\"email-input\" className=\"form-input\" placeholder=\"Enter your email here\"></input>\n\n    //             <input name=\"user-input\" className=\"form-input\" placeholder=\"Create a unique username\"></input>\n\n    //             <input name=\"pass-input\" className=\"form-input\" placeholder=\"Create a unique password\"></input>\n\n    //             <button type=\"submit\">Get Learning!</button>\n\n    //         </form>\n    //     </section>  \n    //   )\n};\n\nexport default SignUp;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../../utils/auth';\nimport { LOGIN_USER } from '../../utils/mutations';\nimport Header from '../../components/Header';\n\n\nconst Login = props => {\n    const [formState, setFormState] = useState({ email: '', password: '' });\n    const [Login, { error }] = useMutation(LOGIN_USER);\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n\n        //seting form state to value specified in form\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n    };\n\n    const handleFormSubmit = async e => {\n        e.preventDefault();\n\n        try {\n            console.log(formState);\n            const { data } = await Login({\n                variables: { ...formState }\n            });\n            console.log(data);\n\n            Auth.login(data.login.token);\n        }\n        catch (e) {\n            console.log(e)\n        }\n\n        setFormState({\n            email: '',\n            password: ''\n        })\n    }\n\n\n    return (\n        <section>\n            <Header />\n            <div className=\"form\">\n                <div className=\"form-container\">\n                    <Link to=\"/signup\">Sign-up instead</Link>\n\n                    <h2>Login Below</h2>\n                    <form onSubmit={handleFormSubmit}>\n                        <input\n                            className=\"form-input\"\n                            placeholder=\"Your email\"\n                            name=\"email\"\n                            type=\"email\"\n                            id=\"email\"\n                            value={formState.email}\n                            onChange={handleChange}\n                        />\n                        <br />\n                        <input\n                            className=\"form-input\"\n                            placeholder=\"******\"\n                            name=\"password\"\n                            type=\"password\"\n                            id=\"password\"\n                            value={formState.password}\n                            onChange={handleChange}\n                        />\n                        <br />\n                        <button className=\"btn d-block w-100\" type=\"submit\">\n                            Submit\n              </button>\n                    </form>\n                    {error && <div>Something Went Wrong</div>}\n                </div>\n            </div>\n        </section>\n    )\n};\n\nexport default Login;","import \"tailwindcss/tailwind.css\"\nimport React from 'react';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from 'apollo-boost';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n//component imports\nimport Landing from './pages/Landing';\nimport Footer from './components/Footer';\n//page imports\nimport Signup from './pages/SignupForm';\nimport Login from './pages/LoginForm';\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n\n  uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n       <Router>\n        <div>\n        <Switch>\n          <Route path=\"/signup\">\n            <Signup />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/\">\n            <Landing />\n          </Route>\n        </Switch>\n        </div>\n      </Router>\n      <Footer />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n"],"sourceRoot":""}